// -------------------------------------------------------------
// グローバル変数
// -------------------------------------------------------------
float4x4	m_WVP;				///< ワールド * ビュー * 射影変換行列
float4		m_LightDir;			///< ライトの方向ベクトル
float4		m_Ambient = 0.0f;	///< アンビエント色

// -------------------------------------------------------------
// テクスチャ
// -------------------------------------------------------------
sampler tex0 : register(s0);

// -------------------------------------------------------------
// 頂点シェーダからピクセルシェーダに渡すデータ
// -------------------------------------------------------------
struct VS_OUT
{
	float4 Pos		: POSITION;		///< 頂点座標
	float4 Color	: COLOR0;		///< 頂点カラー
	float2 Tex		: TEXCOORD0;	///< テクセル座標
};

// -------------------------------------------------------------
// Pass0 : 頂点シェーダー
// -------------------------------------------------------------
VS_OUT VS_0(
				float4 Pos		: POSITION,
				float4 Normal	: NORMAL,
				float2 Tex		: TEXCOORD0 )
{
	VS_OUT Out	= (VS_OUT)0;

	// 座標
	Out.Pos		= mul( Pos, m_WVP );
	// テクセル
	Out.Tex		= Tex;
	// 照明を逆方向に
	float3 L	= -normalize( m_LightDir.xyz );
	// 法線
	float3 N	= normalize( Normal.xyz );
	// 照明と法線から内積を計算する。アンビエント以下にはならないように
	Out.Color	= max( m_Ambient, dot( N, L ) );

	return Out;
}

// -------------------------------------------------------------
// Pass0 : ピクセルシェーダー
// -------------------------------------------------------------
float4 PS_0( VS_OUT In) : COLOR
{
	return In.Color * tex2D( tex0, In.Tex );
}

// -------------------------------------------------------------
// テクニック
// -------------------------------------------------------------
technique TShader
{
	//--------------------
	// Xファイル
	//--------------------
	pass p0
	{
		VertexShader	= compile vs_2_0 VS_0();
		PixelShader		= compile ps_2_0 PS_0();
	}

}